//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Scripts/Input/InputAsset/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace GameCells.Player.Input
{
    public partial class @PlayerControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""1ac35f9e-b29a-423c-b490-bdaee2f235d2"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""5dca69c1-bb42-4ca7-bf96-9bc18af7b717"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchMove"",
                    ""type"": ""PassThrough"",
                    ""id"": ""4e598a46-ffc7-4150-8a9f-3e6a96ac6524"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TouchStart"",
                    ""type"": ""PassThrough"",
                    ""id"": ""97ed9e0c-b65d-4876-adf1-58a6bb62050d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchEnd"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0c27bd1d-ff8d-4256-a7b0-628a0ae67249"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""eeaf4f51-3f67-48df-8e08-5b9583613bb0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c5d839f-5388-4434-9348-dc2d8c206676"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""80049256-e424-427b-ae8b-46441680a05f"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""TouchMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""179bdd66-43e4-416b-8310-a769bcf2cd70"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""TouchMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e6e546c-1231-49d5-b285-ad0c48678dfe"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""TouchStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15f1686f-4c92-444d-bd7f-c33908996eee"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""TouchStart"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""15300e93-234b-41f0-95f8-480828a85a91"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""TouchEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""65c941e6-c129-490a-bffc-49d8005ea50a"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""TouchEnd"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Gameplay2"",
            ""id"": ""43cca490-51e9-42a2-a295-daf93ce91aba"",
            ""actions"": [
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""bfd13cee-e264-4cc3-8426-6801ca4b67b3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TouchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""dd0efddd-2708-4251-8a4f-be6fb000a0ec"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""StartDrag"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c238908c-8b29-44ac-a15d-e59016c43f00"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EndDrag"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7edb8341-e5d4-45cb-8650-97fe699eed9a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ee633c39-6f33-4f10-96fd-509a9d512ff0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e4b44c9-dcec-45a7-b6d8-daa9f8aceba1"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4400c8b8-c45a-41ec-ba5f-64c9899c446b"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0b4c6b8a-dddb-4f5a-a95d-f2882292c217"",
                    ""path"": ""<Touchscreen>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""TouchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0bba45a-cad3-4a5b-86ea-ad30e3b7cecf"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""StartDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""374fbbad-8d4f-4d6b-8f1d-eda1ae6dff13"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""StartDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""79318b63-c729-4a67-be5d-53feda457a5c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Press(behavior=1)"",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""EndDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90c0efaf-29bf-450c-930a-4d75cb0851c4"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mobile"",
                    ""action"": ""EndDrag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Gameplay
            m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
            m_Gameplay_Tap = m_Gameplay.FindAction("Tap", throwIfNotFound: true);
            m_Gameplay_TouchMove = m_Gameplay.FindAction("TouchMove", throwIfNotFound: true);
            m_Gameplay_TouchStart = m_Gameplay.FindAction("TouchStart", throwIfNotFound: true);
            m_Gameplay_TouchEnd = m_Gameplay.FindAction("TouchEnd", throwIfNotFound: true);
            // Gameplay2
            m_Gameplay2 = asset.FindActionMap("Gameplay2", throwIfNotFound: true);
            m_Gameplay2_Tap = m_Gameplay2.FindAction("Tap", throwIfNotFound: true);
            m_Gameplay2_TouchPosition = m_Gameplay2.FindAction("TouchPosition", throwIfNotFound: true);
            m_Gameplay2_StartDrag = m_Gameplay2.FindAction("StartDrag", throwIfNotFound: true);
            m_Gameplay2_EndDrag = m_Gameplay2.FindAction("EndDrag", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Gameplay
        private readonly InputActionMap m_Gameplay;
        private IGameplayActions m_GameplayActionsCallbackInterface;
        private readonly InputAction m_Gameplay_Tap;
        private readonly InputAction m_Gameplay_TouchMove;
        private readonly InputAction m_Gameplay_TouchStart;
        private readonly InputAction m_Gameplay_TouchEnd;
        public struct GameplayActions
        {
            private @PlayerControls m_Wrapper;
            public GameplayActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Tap => m_Wrapper.m_Gameplay_Tap;
            public InputAction @TouchMove => m_Wrapper.m_Gameplay_TouchMove;
            public InputAction @TouchStart => m_Wrapper.m_Gameplay_TouchStart;
            public InputAction @TouchEnd => m_Wrapper.m_Gameplay_TouchEnd;
            public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
            public void SetCallbacks(IGameplayActions instance)
            {
                if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
                {
                    @Tap.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTap;
                    @Tap.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTap;
                    @Tap.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTap;
                    @TouchMove.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTouchMove;
                    @TouchMove.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTouchMove;
                    @TouchMove.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTouchMove;
                    @TouchStart.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTouchStart;
                    @TouchStart.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTouchStart;
                    @TouchStart.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTouchStart;
                    @TouchEnd.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTouchEnd;
                    @TouchEnd.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTouchEnd;
                    @TouchEnd.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnTouchEnd;
                }
                m_Wrapper.m_GameplayActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Tap.started += instance.OnTap;
                    @Tap.performed += instance.OnTap;
                    @Tap.canceled += instance.OnTap;
                    @TouchMove.started += instance.OnTouchMove;
                    @TouchMove.performed += instance.OnTouchMove;
                    @TouchMove.canceled += instance.OnTouchMove;
                    @TouchStart.started += instance.OnTouchStart;
                    @TouchStart.performed += instance.OnTouchStart;
                    @TouchStart.canceled += instance.OnTouchStart;
                    @TouchEnd.started += instance.OnTouchEnd;
                    @TouchEnd.performed += instance.OnTouchEnd;
                    @TouchEnd.canceled += instance.OnTouchEnd;
                }
            }
        }
        public GameplayActions @Gameplay => new GameplayActions(this);

        // Gameplay2
        private readonly InputActionMap m_Gameplay2;
        private IGameplay2Actions m_Gameplay2ActionsCallbackInterface;
        private readonly InputAction m_Gameplay2_Tap;
        private readonly InputAction m_Gameplay2_TouchPosition;
        private readonly InputAction m_Gameplay2_StartDrag;
        private readonly InputAction m_Gameplay2_EndDrag;
        public struct Gameplay2Actions
        {
            private @PlayerControls m_Wrapper;
            public Gameplay2Actions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Tap => m_Wrapper.m_Gameplay2_Tap;
            public InputAction @TouchPosition => m_Wrapper.m_Gameplay2_TouchPosition;
            public InputAction @StartDrag => m_Wrapper.m_Gameplay2_StartDrag;
            public InputAction @EndDrag => m_Wrapper.m_Gameplay2_EndDrag;
            public InputActionMap Get() { return m_Wrapper.m_Gameplay2; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(Gameplay2Actions set) { return set.Get(); }
            public void SetCallbacks(IGameplay2Actions instance)
            {
                if (m_Wrapper.m_Gameplay2ActionsCallbackInterface != null)
                {
                    @Tap.started -= m_Wrapper.m_Gameplay2ActionsCallbackInterface.OnTap;
                    @Tap.performed -= m_Wrapper.m_Gameplay2ActionsCallbackInterface.OnTap;
                    @Tap.canceled -= m_Wrapper.m_Gameplay2ActionsCallbackInterface.OnTap;
                    @TouchPosition.started -= m_Wrapper.m_Gameplay2ActionsCallbackInterface.OnTouchPosition;
                    @TouchPosition.performed -= m_Wrapper.m_Gameplay2ActionsCallbackInterface.OnTouchPosition;
                    @TouchPosition.canceled -= m_Wrapper.m_Gameplay2ActionsCallbackInterface.OnTouchPosition;
                    @StartDrag.started -= m_Wrapper.m_Gameplay2ActionsCallbackInterface.OnStartDrag;
                    @StartDrag.performed -= m_Wrapper.m_Gameplay2ActionsCallbackInterface.OnStartDrag;
                    @StartDrag.canceled -= m_Wrapper.m_Gameplay2ActionsCallbackInterface.OnStartDrag;
                    @EndDrag.started -= m_Wrapper.m_Gameplay2ActionsCallbackInterface.OnEndDrag;
                    @EndDrag.performed -= m_Wrapper.m_Gameplay2ActionsCallbackInterface.OnEndDrag;
                    @EndDrag.canceled -= m_Wrapper.m_Gameplay2ActionsCallbackInterface.OnEndDrag;
                }
                m_Wrapper.m_Gameplay2ActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Tap.started += instance.OnTap;
                    @Tap.performed += instance.OnTap;
                    @Tap.canceled += instance.OnTap;
                    @TouchPosition.started += instance.OnTouchPosition;
                    @TouchPosition.performed += instance.OnTouchPosition;
                    @TouchPosition.canceled += instance.OnTouchPosition;
                    @StartDrag.started += instance.OnStartDrag;
                    @StartDrag.performed += instance.OnStartDrag;
                    @StartDrag.canceled += instance.OnStartDrag;
                    @EndDrag.started += instance.OnEndDrag;
                    @EndDrag.performed += instance.OnEndDrag;
                    @EndDrag.canceled += instance.OnEndDrag;
                }
            }
        }
        public Gameplay2Actions @Gameplay2 => new Gameplay2Actions(this);
        private int m_KeyboardSchemeIndex = -1;
        public InputControlScheme KeyboardScheme
        {
            get
            {
                if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
                return asset.controlSchemes[m_KeyboardSchemeIndex];
            }
        }
        private int m_MobileSchemeIndex = -1;
        public InputControlScheme MobileScheme
        {
            get
            {
                if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
                return asset.controlSchemes[m_MobileSchemeIndex];
            }
        }
        public interface IGameplayActions
        {
            void OnTap(InputAction.CallbackContext context);
            void OnTouchMove(InputAction.CallbackContext context);
            void OnTouchStart(InputAction.CallbackContext context);
            void OnTouchEnd(InputAction.CallbackContext context);
        }
        public interface IGameplay2Actions
        {
            void OnTap(InputAction.CallbackContext context);
            void OnTouchPosition(InputAction.CallbackContext context);
            void OnStartDrag(InputAction.CallbackContext context);
            void OnEndDrag(InputAction.CallbackContext context);
        }
    }
}
